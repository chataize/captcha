@implements IDisposable
@inject PersistentComponentState ApplicationState
@inject CaptchaService CaptchaService

<div id="@_id"></div>

@code {
    private PersistingComponentStateSubscription _persistingSubscription;

    private int _id = Random.Shared.Next();

    private string? _ipAddress;

    [Parameter]
    public string? IpAddress { get; set; }

    [Parameter]
    public string? SiteKey { get; set; }

    [Parameter]
    public string? Secret { get; set; }

    [Parameter]
    public CaptchaTheme Theme { get; set; }

    [Parameter]
    public CaptchaSize Size { get; set; }

    [Parameter]
    public bool IsVerified { get; set; }

    [Parameter]
    public EventCallback<bool> IsVerifiedChanged { get; set; }

    [Parameter]
    public EventCallback Opened { get; set; }

    [Parameter]
    public EventCallback Closed { get; set; }

    [Parameter]
    public EventCallback Succeeded { get; set; }

    [Parameter]
    public EventCallback Expired { get; set; }

    [Parameter]
    public EventCallback ChallengeExpired { get; set; }

    [Parameter]
    public EventCallback<string> Error { get; set; }

    public void Dispose()
    {
        _persistingSubscription.Dispose();
    }

    [JSInvokable]
    public async Task OnCaptchaCompleted(string token)
    {
        IsVerified = await CaptchaService.VerifyTokenAsync(token, IpAddress ?? _ipAddress, SiteKey, Secret);

        if (IsVerifiedChanged.HasDelegate)
        {
            await IsVerifiedChanged.InvokeAsync(IsVerified);
        }

        if (Succeeded.HasDelegate && IsVerified)
        {
            await Succeeded.InvokeAsync();
        }
    }

    [JSInvokable]
    public async Task OnCaptchaOpened()
    {
        if (Opened.HasDelegate)
        {
            await Opened.InvokeAsync();
        }
    }

    [JSInvokable]
    public async Task OnCaptchaClosed()
    {
        if (Closed.HasDelegate)
        {
            await Closed.InvokeAsync();
        }
    }

    [JSInvokable]
    public async Task OnCaptchaExpired()
    {
        IsVerified = false;

        if (IsVerifiedChanged.HasDelegate)
        {
            await IsVerifiedChanged.InvokeAsync(IsVerified);
        }

        if (Expired.HasDelegate)
        {
            await Expired.InvokeAsync();
        }
    }

    [JSInvokable]
    public async Task OnCaptchaChallengeExpired()
    {
        IsVerified = false;

        if (IsVerifiedChanged.HasDelegate)
        {
            await IsVerifiedChanged.InvokeAsync(IsVerified);
        }

        if (ChallengeExpired.HasDelegate)
        {
            await ChallengeExpired.InvokeAsync();
        }
    }

    [JSInvokable]
    public async Task OnCaptchaError(string code)
    {
        IsVerified = false;

        if (IsVerifiedChanged.HasDelegate)
        {
            await IsVerifiedChanged.InvokeAsync(IsVerified);
        }

        if (Error.HasDelegate)
        {
            await Error.InvokeAsync(code);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (ApplicationState.TryTakeFromJson<string>("ipAddress", out var ipAddress))
        {
            _ipAddress = ipAddress;
        }
        else
        {
            _ipAddress = CaptchaService.IpAddress;
            _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await CaptchaService.InitializeAsync(_id, DotNetObjectReference.Create(this), SiteKey, Theme, Size);
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("ipAddress", CaptchaService.IpAddress);
        return Task.CompletedTask;
    }
}
